{"version":3,"sources":["components/ImageList.js","containers/ImageList.js","components/Search.js","APIs/giphyAPI.js","actions/getUrls.js","containers/Search.js","App.js","reducers/imageUrls.js","reducers/buttonText.js","reducers/index.js","index.js"],"names":["ImageList","_ref","list","urlList","map","url","react_default","a","createElement","className","key","src","alt","connect","state","imageUrls","Search","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","title","target","value","setState","handleSubmit","getUrls","preventDefault","buttonText","onSubmit","onChange","type","React","Component","giphyApi","word","concat","axios","get","dispatch","giphyAPI","then","res","imageUrlList","data","item","images","downsized","payload","receiveData","App","containers_Search","containers_ImageList","initialState","arguments","length","undefined","action","combineReducers","middleWares","thunk","store","createStore","rootReducer","applyMiddleware","apply","console","log","getState","render","es","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.022cf8ac.chunk.js","sourcesContent":["// 受け取った URL を元に img 要素を作成するコンポーネント\n\nimport React from \"react\";\n\nconst ImageList = ({ urlList }) => {\n  const list = urlList.map(url => {\n    return (\n      <li className=\"item\" key={url}>\n        <img className=\"image\" src={url} alt=\"\" />\n      </li>\n    );\n  });\n  return <ul className=\"list\">{list}</ul>;\n};\n\nexport default ImageList;\n","// store を作成したコンポーネントに connect する\nimport ImageList from \"../components/ImageList\";\nimport { connect } from \"react-redux\";\n\nconst mapStateToProps = state => {\n  return {\n    urlList: state.imageUrls\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  null\n)(ImageList);\n","import React from \"react\";\n\nclass Search extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { title: \"\" };\n  }\n\n  render() {\n    const { buttonText } = this.props;\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <input value={this.state.title} onChange={this.handleChange} />\n          <input type=\"submit\" value={buttonText} />\n        </form>\n      </div>\n    );\n  }\n\n  handleChange = event => {\n    const title = event.target.value;\n    this.setState({ title: title });\n  };\n\n  handleSubmit = event => {\n    // connectで与えられたメソッドを受け取る\n    const { getUrls } = this.props;\n    event.preventDefault();\n\n    // 使用する\n    getUrls(this.state.title);\n    this.setState({ title: \"\" });\n  };\n}\n\nexport default Search;\n","import axios from \"axios\";\n\nconst giphyApi = word => {\n  const search = word;\n  const key = \"iy6NrdhiDOyR3eYl9Bno47CGIUZsFz8O\";\n  const limit = 100;\n  const url = `https://api.giphy.com/v1/gifs/search?q=${search}&api_key=${key}&limit=${limit}`;\n\n  // promiseオブジェクトがreturnされるようにする\n  return axios.get(url);\n};\n\nexport default giphyApi;\n","import giphyAPI from \"../APIs/giphyAPI\";\n\n// リクエスト開始用のアクションを作成するクリエイター\nconst startRequest = () => {\n  return {\n    type: \"START_REQUEST\"\n  };\n};\n\n// 通常のaction creator\nconst receiveData = data => {\n  return {\n    type: \"RECEIVE_DATA\",\n    payload: data\n  };\n};\n\n// thunk用の関数を返す action creator\nconst getUrls = word => {\n  return dispatch => {\n    dispatch(startRequest());\n    giphyAPI(word).then(res => {\n      const data = res.data.data;\n      const imageUrlList = data.map(item => item.images.downsized.url);\n      dispatch(receiveData(imageUrlList));\n    });\n  };\n};\n\nexport default getUrls;\n","import Search from \"../components/Search\";\nimport { connect } from \"react-redux\";\n\n// actionを読み込む\nimport getUrls from \"../actions/getUrls\";\n\nconst mapStateToProps = state => {\n  return {\n    buttonText: state.buttonText\n  };\n};\n\n// actionをdispatchするメソッドをpropsとして渡す\nconst mapDispatchToProps = dispatch => {\n  return {\n    getUrls: word => {\n      dispatch(getUrls(word));\n    }\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Search);\n","import React from \"react\";\n\nimport ImageList from \"./containers/ImageList\";\nimport Search from \"./containers/Search\";\n\nconst App = () => {\n  return (\n    <div>\n      App\n      <Search />\n      <ImageList />\n    </div>\n  );\n};\n\nexport default App;\n","// 取得した画像用URLのための reducer\n\nconst initialState = [];\n\nconst imageUrls = (state = initialState, action) => {\n  switch (action.type) {\n    case \"RECEIVE_DATA\":\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default imageUrls;\n","// ロード状況をボタンに表示する\nconst initialState = \"Find Your GIFs\";\n\nconst imageUrls = (state = initialState, action) => {\n  switch (action.type) {\n    case \"START_REQUEST\":\n      return \"Wait...\";\n\n    case \"RECEIVE_DATA\":\n      return initialState;\n\n    default:\n      return state;\n  }\n};\n\nexport default imageUrls;\n","import { combineReducers } from \"redux\";\nimport imageUrls from \"./imageUrls\";\nimport buttonText from \"./buttonText\";\n\nexport default combineReducers({ imageUrls, buttonText });\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport \"./App.css\";\n\nimport App from \"./App\";\n\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { Provider } from \"react-redux\";\nimport rootReducer from \"./reducers\";\n\nconst middleWares = [thunk];\nconst store = createStore(rootReducer, applyMiddleware(...middleWares));\nconsole.log(store.getState());\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}